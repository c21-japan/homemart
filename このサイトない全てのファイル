[1;33m🤔 Claudeに聞いています...[0m
はい、Next.js でエラーが出た場合の完全なコンポーネントまたは機能を TypeScript 対応で作成しました。エラーハンドリングも組み込んでいます。

```typescript
import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';

interface ErrorPageProps {
  errorMessage?: string;
}

const ErrorPage: React.FC<ErrorPageProps> = ({ errorMessage }) => {
  const router = useRouter();
  const [error, setError] = useState<string | undefined>(errorMessage);

  useEffect(() => {
    // エラーメッセージがない場合は、デフォルトのエラーメッセージを設定
    if (!error) {
      setError('An unexpected error occurred. Please try again later.');
    }
  }, [error]);

  const handleRetry = () => {
    // エラーが解決された場合は、前のページに戻る
    router.back();
  };

  return (
    <div>
      <Head>
        <title>Error</title>
      </Head>
      <main>
        <h1>Error</h1>
        <p>{error}</p>
        <button onClick={handleRetry}>Retry</button>
      </main>
    </div>
  );
};

export default ErrorPage;
```

このコンポーネントは以下の機能を持っています:

1. TypeScript 対応: コンポーネントの props と state は TypeScript で定義されています。
2. エラーメッセージの表示: `errorMessage` prop を受け取り、エラーメッセージを表示します。
3. デフォルトのエラーメッセージ: `errorMessage` prop が undefined の場合は、デフォルトのエラーメッセージを表示します。
4. リトライボタン: ユーザーがリトライボタンをクリックすると、前のページに戻ります。

このコンポーネントを使用することで、サイト内でエラーが発生した場合に、適切なエラーページを表示することができます。
